Popular storage systems support diverse storage abstractions by providing important
disaggregation benefits. Instead of maintaining a separate system for each
abstraction, unified storage systems, in particular, support standard file, block, and
object abstractions so the same hardware can be used for a wider range and a more
flexible mix of applications. As these large-scale unified storage systems evolve to
meet the requirements of an increasingly diverse set of applications and
next-generation hardware, de jure approaches of the past---based on standardized
interfaces---are giving way to domain-specific interfaces and optimizations. While
promising, the ad-hoc strategies characteristic of current approaches to co-design are
untenable.

We recently proposed a more principled co-design strategy called \emph{programmable
storage}. However, this approach entails navigating a complex design space and
simultaneously addressing often orthogonal concerns (e.g. functional correctness,
performance, and fault-tolerance). Worse still, the availability of domain expertise
required to build a performant interface is not a fixed or reliable resource. As a
result, interface composition is sensitive to the change, quickly evolving workloads,
and software/hardware upgrades characteristic of unified storage systems.

To address these challenges, we advocate for the use of high-level declarative
languages (e.g. Datalog) as a means of programming new storage system interfaces. We
observe that despite the parallels with database systems, this paper demonstrates, and
begins to address, fundamental differences in the optimization design space.
